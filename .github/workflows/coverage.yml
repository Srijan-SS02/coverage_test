name: Code Coverage

on:
  push:
    branches:
      - main

jobs:
  base_branch_cov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
      - name: Use Node.js v20.9.0
        uses: actions/setup-node@v3
        with:
          node-version: '20.9.0'
      - name: Install dependencies
        run: yarn
      - name: Run test coverage with jest
        run: yarn jest --coverage
      - name: Upload code coverage for ref branch
        uses: actions/upload-artifact@v3
        with:
          name: ref-lcov.info
          path: ./coverage/lcov.info

  checks:
    runs-on: ubuntu-latest
    needs: base_branch_cov
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js v20.9.0
        uses: actions/setup-node@v3
        with:
          node-version: '20.9.0'
      - name: Download code coverage report from base branch
        uses: actions/download-artifact@v3
        with:
          name: ref-lcov.info
      - name: Install dependencies
        run: yarn
      - name: Run test coverage with jest
        run: yarn jest --coverage
      - name: Generate Code Coverage report
        id: code-coverage
        uses: barecheck/code-coverage-action@v1
        with:
          barecheck-github-app-token: ${{ secrets.BARECHECK_GITHUB_APP_TOKEN }}
          lcov-file: "./coverage/lcov.info"
          base-lcov-file: "./lcov.info"
          minimum-ratio: 0
          send-summary-comment: true
          show-annotations: "warning"
      - name: Check lcov.info content
        run: |
            cat ./coverage/lcov.info
            # Or to just check if the file exists and is not empty
            ls -l ./coverage/lcov.info
  
      
      - name: Calculate Coverage Percentage
        run: |
            TOTAL_LINES=$(awk '/LF:/{total += $2} END {print total}' ./coverage/lcov.info)
            COVERED_LINES=$(awk '/LH:/{covered += $2} END {print covered}' ./coverage/lcov.info)
            
            # Prevent division by zero
            if [ "$TOTAL_LINES" -eq 0 ]; then
            COVERAGE_PERCENTAGE=0
            else
            COVERAGE_PERCENTAGE=$(awk -v covered="$COVERED_LINES" -v total="$TOTAL_LINES" 'BEGIN {printf "%.2f", (covered/total)*100}')
            fi
            
            echo "::set-output name=coverage_percentage::$COVERAGE_PERCENTAGE"
            echo "Coverage percentage is $COVERAGE_PERCENTAGE%"
      
      - name: Calculate Coverage Percentage
        run: |
              TOTAL_LINES=$(awk '/LF:/{total += $2} END {print total}' ./coverage/lcov.info)
              COVERED_LINES=$(awk '/LH:/{covered += $2} END {print covered}' ./coverage/lcov.info)
              
              # Prevent division by zero
              if [ "$TOTAL_LINES" -eq 0 ]; then
                COVERAGE_PERCENTAGE=0
              else
                COVERAGE_PERCENTAGE=$(awk -v covered="$COVERED_LINES" -v total="$TOTAL_LINES" 'BEGIN {printf "%.2f", (covered/total)*100}')
              fi
              
              echo "::set-output name=coverage_percentage::$COVERAGE_PERCENTAGE"
              echo "Coverage percentage is $COVERAGE_PERCENTAGE%"


      - name: Commit and push changes
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add README.md
          git commit -m "Update README with code coverage percentage" -a || echo "No changes to commit"
          git push
